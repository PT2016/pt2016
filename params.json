{"name":"Programming Techniques 2016","tagline":"","body":"### Reguli Laborator PT\r\n\r\n* prezenta\r\n    * participarea la toate laboratoarele este obligatorie \r\n    * se accepta maxim 3 absente in situatii exceptionale (daca sunt anuntata inainte)\r\n\r\n* teme\r\n    * 5 teme cu predare din 2 in 2 saptamani\r\n    * fiecare saptamana de delay => -1p la nota finala a temei respective\r\n    * intr-un laborator se poate preda o singura tema restanta\r\n    * in saptamana premergatoare sesiunii se poate preda o singura tema restanta\r\n    * exista posibilitatea obtinerii unor bonusuri anuntate pe parcursul semestrului\r\n\r\n* predarea temelor\r\n    * codul sursa\r\n    * javadoc pe clasa si pe metodele cu logica de business\r\n    * documentatie (3000 de cuvinte, accent pe diagrame: use case, class & sequence) avand structura\r\n        * Obiectivul temei\r\n        * Analiza problemei, modelare, scenarii, cazuri de utilizare\r\n        * Proiectare (diagrame UML, structuri de date, proiectare clase, interfete, relatii, packages, algoritmi, interfata utilizator)\r\n        * Implementare si testare\r\n        * Rezultate\r\n        * Concluzii, ce s-a invatat din tema, dezvoltari ulterioare\r\n        * Bibliografie\r\n    * la predare, veti primi o intrebare intrebare legata de tema (fie pe baza codului, fie pe baza documentatiei)\r\n\r\n* `    if (labFinalGrade >= 5 && attendances >= 11) {\r\n           return \"pass\"; \r\n       } else {\r\n           return \"fail\";\r\n       }`\r\n\r\n\r\n### Barem Tema 1\r\nRequirement: Propose, design and implement a system for polynomial processing. Consider the polynomials of one variable and integer coefficients.\r\n\r\n   * documentatie - 2p\r\n   * interfata grafica - 1p\r\n   * adunare - 1p\r\n   * scadere - 1p\r\n   * inmultire - 1.5p\r\n   * impartire - 1.5p\r\n   * integrare si derivare / graficul functiei / calculul radacinilor- 2p\r\n\r\n### Clean code conventions\r\n\"Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live. Code for readability.\"\r\n\r\n   Clean code can be achieved by \r\n   * meaningful names (please see ch. 9 of the recommended reading material)\r\n      * pronounceable, searchable, avoid encodings\r\n      * intention-revealing names\r\n   * language fundamentals (please see ch. 10.1 of the recommended reading material)\r\n      * minimize the accessibility of classes and members (use encapsulation)\r\n   * methods\r\n      * small, easy to read & understand\r\n      * do exactly one thing\r\n      * keep number of arguments minimal & justified \r\n   * objects & data (Law of Demeter <https://en.wikipedia.org/wiki/Law_of_Demeter>)\r\n     * keep the variables private when you don't want anyone to depend on them\r\n     * hide implementation, expose interface\r\n     * \"talk to friends, not strangers\":\r\n        * a method `f` of class `C` should only call methods of:\r\n            * `C`\r\n            * objects created by `f`\r\n            * objects passed as an argument of `f`\r\n            * objects held in an instance of `C`\r\n        * a method should NOT invoke methods on objects that are returned by any allowed functions\r\n   * formatting (please see ch 4, 6 and 7 of the recommended reading material)\r\n   * comments (please see ch. 5 of the recommended reading material)\r\n       * explain your intend, but avoid noisy or redundant comments\r\n   * exceptions & error handling\r\n       * have a clear separation between error handling and business logic (define a normal flow and the exceptional flows)\r\n       * avoid returning/passing `null` in case of exceptions (difficult to handle) - thrown an exception instead\r\n       * provide context (informative messages) with exceptions\r\n\r\nClean code should obey the following principles:\r\n   * single responsibility & high cohesion\r\n       * specialized classes/methods\r\n       * keep modules/elements together\r\n   * low coupling\r\n       * minimize dependencies\r\n\r\nRecommended reading: <https://oracle.com/technetwork/java/codeconventions-150003.pdf>\r\n\r\n\r\n\r\n\r\n","google":"UA-74401060-1","note":"Don't delete this file! It's used internally to help with page regeneration."}